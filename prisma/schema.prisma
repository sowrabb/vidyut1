// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
  SELLER
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  name            String?
  password        String
  avatar          String?
  bio             String?
  location        String?
  phone           String?
  isVerified      Boolean        @default(false)
  tier            String         @default("Bronze") // Bronze, Silver, Gold, Platinum
  role            Role           @default(USER)
  totalSales      Float          @default(0)
  totalOrders     Int            @default(0)
  rating          Float          @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  products        Product[]
  orders          Order[]
  reviews         Review[]
  wishlistItems   WishlistItem[]
  sellerProfile   SellerProfile?
  searchHistory   SearchHistory[]
  kycDocs         String?
  guidelines      Guideline[]
}

model SellerProfile {
  id              String    @id @default(cuid())
  businessName    String?
  businessType    String?   // Individual, Enterprise
  gstNumber       String?
  businessAddress String?
  bankDetails     String?   // Encrypted
  storeBanner     String?
  storeDescription String?
  isEnterprise    Boolean   @default(false)
  verificationStatus String @default("pending") // pending, verified, rejected
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  kycDocs         String?
}

model Category {
  id          String        @id @default(cuid())
  name        String        @unique
  slug        String        @unique
  description String?
  imageUrl    String?
  parentId    String?
  parent      Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]    @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Product {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String
  shortDescription String?
  price         Float
  originalPrice Float?
  imageUrls     String         // JSON array of image URLs
  brand         String?
  model         String?
  sku           String?        @unique
  stock         Int            @default(0)
  minOrder      Int            @default(1)
  isActive      Boolean        @default(true)
  isFeatured    Boolean        @default(false)
  weight        Float?
  dimensions    String?        // JSON: {length, width, height}
  colors        String?        // JSON array of available colors
  sizes         String?        // JSON array of available sizes
  specifications String?       // JSON object for technical specs
  warranty      String?
  returnPolicy  String?
  tags          String?        // JSON array of tags
  views         Int            @default(0)
  salesCount    Int            @default(0)
  rating        Float          @default(0)
  reviewCount   Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  seller        User           @relation(fields: [sellerId], references: [id])
  sellerId      String
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
}

model Order {
  id             String      @id @default(cuid())
  orderNumber    String      @unique
  status         String      @default("processing") // processing, confirmed, shipped, delivered, cancelled, returned
  totalAmount    Float
  shippingCost   Float       @default(0)
  taxAmount      Float       @default(0)
  discountAmount Float       @default(0)
  paymentStatus  String      @default("pending") // pending, paid, failed, refunded
  paymentMethod  String?
  shippingAddress String     // JSON object
  billingAddress String?     // JSON object
  trackingNumber String?
  estimatedDelivery DateTime?
  deliveredAt    DateTime?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  buyer          User        @relation(fields: [buyerId], references: [id])
  buyerId        String
  items          OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float    // Price at time of order
  color     String?
  size      String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5
  title     String?
  comment   String?
  images    String?  // JSON array of image URLs
  isVerified Boolean @default(false)
  helpfulCount Int   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  
  @@unique([productId, userId]) // One review per user per product
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  
  @@unique([userId, productId])
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  results   Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Guideline {
  id        String   @id @default(cuid())
  title     String
  content   String
  state     String
  city      String?
  category  String?
  attachments String? // JSON array of { url, name, type, size }
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}
